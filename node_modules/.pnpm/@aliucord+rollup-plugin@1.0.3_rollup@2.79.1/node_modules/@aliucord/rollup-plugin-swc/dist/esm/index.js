import { transform } from '@swc/core';
import { createFilter } from '@rollup/pluginutils';
import { dirname, isAbsolute, join, resolve } from 'path';
import { promises as fs } from 'fs';
const resolveFilename = async (basename) => {
    for (const extension of ['js', 'jsx', 'ts', 'tsx']) {
        const possibleFilename = `${basename}.${extension}`;
        try {
            await fs.access(possibleFilename);
            return possibleFilename;
        }
        catch { }
    }
    return null;
};
const swc = (pluginOptions = {}) => {
    const { rollup, ...options } = pluginOptions;
    const filter = createFilter(rollup?.include, rollup?.exclude);
    return {
        name: 'swc',
        async resolveId(source, importer) {
            if (importer === undefined || !(source.startsWith('.') || isAbsolute(source))) {
                return null;
            }
            const filename = resolve(dirname(importer), source);
            try {
                return (await fs.stat(filename)).isDirectory()
                    ? await resolveFilename(join(filename, 'index'))
                    : filename;
            }
            catch {
                return await resolveFilename(filename);
            }
        },
        transform(code, filename) {
            if (!filter(filename)) {
                return null;
            }
            options.filename = filename;
            return transform(code, options);
        },
    };
};
export default swc;
