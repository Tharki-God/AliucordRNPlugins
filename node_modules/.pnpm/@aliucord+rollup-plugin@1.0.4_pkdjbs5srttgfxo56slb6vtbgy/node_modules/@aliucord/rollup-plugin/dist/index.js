"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aliucordPlugin = exports.aliucord = void 0;
const child_process_1 = require("child_process");
const rollup_plugin_swc_1 = __importDefault(require("@aliucord/rollup-plugin-swc"));
const rollup_plugin_hermes_1 = require("rollup-plugin-hermes");
const process_1 = require("process");
function spawnAsync(command, args, options) {
    return new Promise((resolve, reject) => {
        const process = (0, child_process_1.spawn)(command, args, options);
        process.once("close", (code) => {
            return resolve(code);
        });
    });
}
function autoDeploy(pushOnly, isPlugin, packageName) {
    return {
        name: "AutoDeploy",
        async writeBundle(options, bundle) {
            if (await spawnAsync("adb", ["push", options.file.replace(".js", ".zip"), "/sdcard/AliucordRN/" + (isPlugin ? "plugins/" : "")], {
                cwd: (0, process_1.cwd)()
            }) != 0) {
                console.error("Failed to push");
                return;
            }
            if (!pushOnly) {
                if (await spawnAsync("adb", ["shell", "am", "start", "-S", "-n", `${packageName !== null && packageName !== void 0 ? packageName : 'com.aliucordrn'}/com.discord.main.MainActivity`]) != 0) {
                    console.error("Failed to start");
                    return;
                }
            }
            console.log("Deployed");
        }
    };
}
function commonOptions(options, pluginOptions, isPlugin) {
    var _a;
    let hash;
    try {
        hash = (0, child_process_1.execSync)("git rev-parse --short HEAD").toString().replace(/\s*/g, "");
    }
    catch (_b) {
        hash = "unknown";
    }
    const addedPlugins = [];
    addedPlugins.push((0, rollup_plugin_swc_1.default)({
        jsc: {
            parser: {
                syntax: "typescript",
                tsx: true
            },
            minify: {},
            target: "es2015",
            transform: {
                constModules: {
                    globals: {
                        "aliucord-version": {
                            "sha": `"${hash}"`
                        },
                    }
                }
            },
            externalHelpers: (pluginOptions === null || pluginOptions === void 0 ? void 0 : pluginOptions.internalHelpers) ? false : true
        },
        env: {
            // Adapted from https://github.com/facebook/metro/blob/main/packages/metro-react-native-babel-preset/src/configs/main.js
            include: ["transform-block-scoping", "proposal-class-properties", "transform-classes", "transform-async-to-generator"],
            // Workaround swc setting defaults from browserlist
            exclude: ["bugfix/transform-edge-default-parameters", "bugfix/transform-async-arrows-in-class", "bugfix/transform-tagged-template-caching", "bugfix/transform-safari-id-destructuring-collision-in-function-expression", "proposal-class-static-block", "proposal-private-property-in-object", "proposal-logical-assignment-operators", "proposal-export-namespace-from", "proposal-nullish-coalescing-operator", "proposal-optional-chaining", "proposal-optional-catch-binding", "proposal-object-rest-spread", "transform-exponentiation-operator", "transform-block-scoped-functions", "transform-template-literals", "transform-spread", "transform-function-name", "transform-arrow-functions", "transform-duplicate-keys", "transform-sticky-regex", "transform-typeof-symbol", "transform-shorthand-properties", "transform-parameters", "transform-for-of", "transform-computed-properties", "transform-regenerator", "transform-new-target", "transform-property-literals", "transform-member-expression-literals", "transform-reserved-words", "transform-destructuring"]
        },
        sourceMaps: true,
        minify: (_a = pluginOptions === null || pluginOptions === void 0 ? void 0 : pluginOptions.minify) !== null && _a !== void 0 ? _a : true
    }));
    addedPlugins.push((0, rollup_plugin_hermes_1.hermes)((pluginOptions === null || pluginOptions === void 0 ? void 0 : pluginOptions.hermesPath) !== undefined ? { hermesPath: pluginOptions.hermesPath } : undefined));
    if (pluginOptions === null || pluginOptions === void 0 ? void 0 : pluginOptions.autoDeploy)
        addedPlugins.push(autoDeploy(pluginOptions.autoDeploy === "push-only", isPlugin, pluginOptions.packageName));
    if (!Array.isArray(options.plugins))
        options.plugins = [options.plugins];
    const sliced = options.plugins.slice(1);
    options.plugins = [options.plugins[0], ...addedPlugins, ...sliced];
    return options;
}
function aliucord(pluginOptions) {
    return {
        name: "AliucordPlugin",
        options(options) {
            return commonOptions(options, pluginOptions, false);
        },
        outputOptions(options) {
            var _a;
            options.compact = (_a = pluginOptions === null || pluginOptions === void 0 ? void 0 : pluginOptions.minify) !== null && _a !== void 0 ? _a : true;
            return options;
        }
    };
}
exports.aliucord = aliucord;
function aliucordPlugin(pluginOptions) {
    return {
        name: "AliucordPlugin",
        options(options) {
            options.external = ["aliucord", "react", "react-native", "@swc/helpers"];
            commonOptions(options, pluginOptions, true);
        },
        outputOptions(options) {
            var _a;
            options.compact = (_a = pluginOptions === null || pluginOptions === void 0 ? void 0 : pluginOptions.minify) !== null && _a !== void 0 ? _a : true;
            options.format = "iife";
            options.globals = (name) => {
                const prefix = "globalThis.aliucord";
                switch (name) {
                    case "aliucord":
                        return prefix;
                    case "react":
                        return prefix + ".metro.React";
                    case "react-native":
                        return prefix + ".metro.ReactNative";
                    case "@swc/helpers":
                        return "swcHelpers";
                }
                if (name.startsWith("aliucord/"))
                    return prefix + `.${name.slice(9).replace("/", ".")}`;
                return name;
            };
            return options;
        }
    };
}
exports.aliucordPlugin = aliucordPlugin;
__exportStar(require("./manifestGen"), exports);
__exportStar(require("./makePluginZip"), exports);
