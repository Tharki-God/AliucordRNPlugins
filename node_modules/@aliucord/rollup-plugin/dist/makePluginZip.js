"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePluginZip = void 0;
const yazl_1 = require("yazl");
function makePluginZip() {
    return {
        name: "MakePluginZip",
        async generateBundle(options, bundle) {
            var _a;
            // Parse output filename
            const file = (_a = options.file) === null || _a === void 0 ? void 0 : _a.split("/").pop();
            // Load manifest output
            const manifestFile = bundle[`${process.env.plugin}-manifest.json`];
            if (!manifestFile)
                throw new Error("makeManifest must be above this task");
            if (manifestFile.type !== "asset")
                throw new Error("Manifest file type was not asset");
            // Load hermes output
            const bundleFile = bundle[`${file}.bundle`];
            if (!bundleFile)
                throw new Error("Hermes bundle output unable to be found");
            if (bundleFile.type !== "asset")
                throw new Error("Bundle file type was not asset");
            const zip = new yazl_1.ZipFile();
            zip.addBuffer(Buffer.from(bundleFile.source), "index.js.bundle", {
                mtime: new Date(0),
                compress: false
            });
            zip.addBuffer(Buffer.from(manifestFile.source), "manifest.json", {
                mtime: new Date(0),
                compress: false
            });
            zip.end();
            // Read outputStream into a buffer
            const chunks = [];
            for await (const chunk of zip.outputStream) {
                chunks.push(typeof chunk === "string"
                    ? Buffer.from(chunk)
                    : chunk);
            }
            const zipBuffer = Buffer.concat(chunks);
            this.emitFile({
                type: "asset",
                fileName: `${process.env.plugin}.zip`,
                source: zipBuffer
            });
        }
    };
}
exports.makePluginZip = makePluginZip;
;
